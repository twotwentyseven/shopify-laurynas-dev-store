{% assign ss = section.settings %}

<section class="featured-product | relative w-full px-container-gutter py-10 | lg:py-20 lg:px-container-gutter-lg | {{ ss.text-align }} {{ ss.bg_color }}-{{ss.bg_color_shade}}">
    
    {% if ss.title != blank%}
        <h2 class="title | mb-2 |  {{ ss.title_typeface }} {{ ss.title_weight }} {{ ss.title_color }}-{{ ss.title_color_shade }} {{ ss.title_size }}">
            {{ ss.title }}
        </h2>
    {% endif %}

    {% if ss.subtitle != blank %}
        <div class="content | mb-6 | lg:mb-10 | {{ ss.subtitle_typeface }} {{ ss.subtitle_size }} {{ ss.subtitle_weight }} {{ ss.subtitle_color }}-{{ ss.subtitle_color_shade }}">
            {{ ss.subtitle }}
        </div>
    {% endif %}
    
    {% assign product = all_products[ss.product]  %}

    {% assign hasVariants = false %}
    {% assign hasSubscriptions = false %}
    {% assign oneOff = true %}

    {% if product.requires_selling_plan %}
        {% assign oneOff = false %}
    {% endif %}

    {% if product.selling_plan_groups.size > 0 %}
        {% assign hasSubscriptions = true %}
    {% endif %}

    {% if product.variants.size > 1 %}

        {% assign hasVariants = true %}

    {% endif %}

    <div data-vue-app class="product-card flex flex-wrap text-left | lg:px-[8.8887%]">

        <product-card
        :metafield-object='{%- render "metafield-loop" namespace:"product_details" , object: product -%}'
        :product-object="{{ product | json | escape }}"
        product-url="{{ product.url }}">
            <template v-slot="props">
                <div class="w-full relative | lg:w-7/12 {% if product.images.size > 1 %}hover-wrapper group{% endif %}">
            
                    {% if product.metafields.custom.flag != blank %}
                        <span class="absolute right-2 top-2 rounded-full uppercase flex items-center justify-center font-semibold px-4 py-2 bg-primary-500 text-white text-body-small | lg:text-body-small-lg">
                            {{ product.metafields.custom.flag }}
                        </span>
                    {% endif %}

                    <div class="sticky-container | sticky flex top-site-header-height | lg:top-site-header-height-lg">

                        {% render 'responsive-image' with image: product.featured_image, link: product.url, wrapper_class: "img-wrap w-full", image_class: "primary-img w-full" %}
                        {% if product.images.size > 1 %}
                            {% render 'responsive-image' with image: product.images[1], link: product.url, wrapper_class: "img-wrap img-wrap-hover z-10 absolute opacity-0 top-0 left-0 h-full w-full transition-all duration-animation-speed group-hover:opacity-100", image_class: "hover-img w-full object-cover h-full w-full" %}
                        {% endif %}

                    </div>
                </div>

                <div :key="`product_card_${props.product.id}`"
                    data-product-details
                    :data-product-id="`${props.product.id}`"
                    class="product-details | w-full pt-6  pb-10 | lg:p-4 lg:pt-1 lg:w-5/12 {{ss.pc_text_color}}-{{ss.pc_text_color_shade}}">

                    <div class="ecommerce-options">

                        <form method="post" action="/cart/add" :id="props.product.id" accept-charset="UTF-8" class="shopify-product-form" enctype="multipart/form-data">

                            <p data-match-height="product-title" class="title | font-headline font-semibold text-headline-4 uppercase mb-2 | lg:text-headline-4-lg"><a href="{{ props.product.url }}">{{ product.title }}</a></p>

                            <div class="product_rating_wrapper">

                                <div class="trustpilot-widget-wrap">
                                    <div class="inner"></div>
                                </div>

                            </div>

                            <template v-if="props.selectedVariant">

                                <p v-if="props.selectedVariant.compare_at_price > props.selectedVariant.price" class="price | text-body-large | lg:text-body-large-lg">
                                    <del class="opacity-25">${ props.formatCurrency(props.selectedVariant.compare_at_price) }</del> ${ props.formatCurrency(props.selectedVariant.price) }
                                </p>
                                <p v-else class="price | text-body-large | lg:text-body-large-lg">${ props.formatCurrency(props.selectedVariant.price) }</p>

                            </template>

                            <template v-if="(props.product.variants.length > 1 && !props.product.requires_selling_plan) || props.product.requires_selling_plan">

                                <!--variant data-->

                                <div class="form-controls">
                                    <div class="hidden">
                                        <input type="hidden" name="properties[_tags]" :value="props.product.tags.join(',')" data-property>
                                        <input v-if="props.selectedVariant" type="hidden" name="id" :value="props.selectedVariant.id" data-property>
                                    </div>
                                </div>

                                <div v-if="props.product.options.length > 0 && props.product.variants[0].option1 != 'Default Title'" class="flex flex-wrap lg:-mx-gutter">
                                    
                                    <div v-for="(option, i) in props.product.options" class="relative w-full lg:px-gutter border-neutral-300 {{ ss.bg_color }}-{{ss.bg_color_shade }}" :key="option.name" :class="['z-'+(3 - i)*10]">
                                    
                                        <div class="selector-wrapper">

                                            <label class="mb-1">${ option }</label>

                                            <div v-if="option == 'size' || option == 'Size'" class="single-option-selector">
                                                <div v-for="(groupedOption, index) in props.groupedOptions[i]" class="border-neutral-300" :key="groupedOption">
                                                    <input type="radio" :name="'product-selector-'+props.product.id" :id="'product-selector-'+props.product.id+'-'+index" :value="groupedOption" v-model="props.selectedOptions[i]">
                                                    <label :for="'product-selector-'+props.product.id+'-'+index" :class="{disabled: !props.optionIsAvailable(i, groupedOption) }">${ groupedOption }</label>
                                                </div>
                                            </div>
                                            <template v-else>
                                                
                                                <styleable-dropdown :default-to-first-option="false" v-model="props.selectedOptions[i]">
                                                    <option v-for="groupedOption in props.groupedOptions[i]" :value="groupedOption" :key="groupedOption">${ groupedOption }</option>
                                                </styleable-dropdown>

                                            </template>
                                        </div>

                                    </div>

                                </div>
                                
                                <template v-if="props.product.selling_plan_groups.length > 0 && !props.product.requires_selling_plan">
                                    <div class="purchase-type | border bg-primary-0 text-neutral-900 mb-2 mt-4 border-neutral-300">
                                        <a @click.prevent="props.subState(false)" href="#" class="flex relative items-center py-3 px-4 text-body-medium uppercase | lg:text-body-medium-lg | before:h-4 before:w-4 before:content-[''] before:rounded-full before:border  before:block before:mr-2 before:transition-all before:duration-animation-speed | after:h-2 after:w-2 after:block after:absolute after:left-5 after:rounded-full after:content-['']  after:transition-all after:duration-animation-speed" :class="[props.subToggle ? 'before:border-neutral-400' : 'active before:border-neutral-300 after:bg-primary-500 bg-primary-100']">{{ settings.one_time }}</a>
                                    </div>
                                </template>
                                <template v-if="props.product.selling_plan_groups.length > 0 && props.product.selling_plan_groups[0].selling_plans">
                                    <div class="purchase-type | border bg-primary-0 text-neutral-900 border-neutral-300">
                                        <template v-if="props.product.selling_plan_groups.length > 0 && !props.product.requires_selling_plan">
                                        <a @click.prevent="props.subState(true)" href="#" class="flex relative items-center py-3 px-4 text-body-medium uppercase | lg:text-body-medium-lg | before:h-4 before:w-4 before:content-[''] before:rounded-full before:border before:block before:mr-2 before:transition-all before:duration-animation-speed | after:h-2 after:w-2 after:block after:absolute after:left-5 after:rounded-full after:content-[''] after:transition-all after:duration-animation-speed" :class="[props.subToggle ? 'active before:border-neutral-300 after:bg-primary-500 bg-primary-100' : 'before:border-neutral-400']">{{ settings.subscription }}</a>
                                        </template>
                                        <div :data-frequency-selector="props.product.id" class="subscription-wrapper selector-wrapper | !mt-0 w-full !bg-primary-100 border-neutral-300 p-4 " :class="[(props.subToggle || props.product.requires_selling_plan)  ? 'block' : 'hidden']">

                                            <styleable-dropdown name="properties[selling_plan]">
                                                <option value="">No Subscription</option>
                                                <option v-for="selling_plan in props.product.selling_plan_groups[0].selling_plans" :value="selling_plan.id" :key="selling_plan.id">
                                                    ${ selling_plan.name }
                                                    <template v-if="selling_plan.price_adjustments[0]">
                                                        - <template v-if="selling_plan.price_adjustments[0].value_type == 'percentage'">
                                                            ${ selling_plan.price_adjustments[0].value }% discount
                                                        </template>
                                                        <template v-if="selling_plan.price_adjustments[0].value_type == 'value'">
                                                            ${ props.formatCurrency(selling_plan.price_adjustments[0].value) }% discount
                                                        </template>
                                
                                                    </template>
                                                </option>
                                            </styleable-dropdown>

                                            {% if settings.subscription_key_points != blank %}
                                                <div class="sub-benefits | mt-2">{{ settings.subscription_key_points }}</div>
                                            {% endif %}
                                        </div>
                                    </div>
                                </template>

                                <div class="flex-grid">
                                    
                                    <template v-if="props.product.available">
                                        <div class="qty-wrapper w-full border-t border-neutral-0/25 pt-2 mt-4">
                                            <label class="w-full uppercase text-body-small block mb-1">Quantity</label>
                                            <div class="flex">
                                                <a href="#" class="decrement qty-btn | py-2 px-4 border border-neutral-300" @click.prevent="props.decrement">-</a>
                                                <input class="mx-4 border border-neutral-300 bg-transparent-500 w-full text-center text-body-small outline-none" name="quantity" type="number" data-qty-selector v-model="props.quantity">
                                                <a href="#" class="increment qty-btn | py-2 px-4 border border-neutral-300" @click.prevent="props.increment">+</a>
                                            </div>
                                        </div>
                                        
                                        <template v-if="!props.selectedVariant">
                                            <button disabled class="btn | w-full py-button-y px-button-x rounded-full text-center text-button flex items-center justify-center relative cursor-pointer | lg:text-button-lg bg-primary-500 text-neutral-0 | transition-all duration-animation-speed | disabled">Not available</button>
                                        </template>
                                        <template v-else-if="props.selectedVariant.available">
                                            <div :class="{'w-full border-t border-neutral-0/25 pt-4 mt-4': (props.product.selling_plan_groups.length > 0 || !props.product.requires_selling_plan)}">
                                                <button type="submit" data-cart-add-async class="btn | w-full py-button-y px-button-x rounded-full text-center text-button flex items-center justify-center relative cursor-pointer | lg:text-button-lg bg-primary-500 text-neutral-0 | transition-all duration-animation-speed">Add to Cart</button>
                                            </div>
                                        </template>
                                        <template v-else>
                                            <div class="w-full border-t border-neutral-0/25 pt-4 mt-4">
                                                <button disabled class="btn | w-full py-button-y px-button-x rounded-full text-center text-button flex items-center justify-center relative cursor-pointer | lg:text-button-lg bg-primary-500 text-neutral-0 | transition-all duration-animation-speed | disabled">Sold Out</button>
                                            </div>
                                        </template>
                                        
                                        <p v-if="props.product.selling_plan_groups.length > 0 || !props.product.requires_selling_plan" class="delivery-fee-msg | text-center mb-4 mt-4 text-body-small">Free delivery over 1 million pounds</p>

                                    </template>
                                    
                                    <template v-else>

                                        <div class="w-full border-t border-neutral-0/25 pt-4 mt-4">
                                            <button disabled class="btn | w-full py-button-y px-button-x rounded-full text-center text-button flex items-center justify-center relative cursor-pointer | lg:text-button-lg bg-primary-500 text-neutral-0 | transition-all duration-animation-speed | disabled">Sold Out</button>
                                        </div>

                                    </template>

                                </div>

                            </div>
                        
                        </form>

                        </div>

                    </div>

                    </template>

                    <template v-else>

                        <form method="post" action="/cart/add" :id="props.product.id" accept-charset="UTF-8" class="shopify-product-form" enctype="multipart/form-data">
                            <div class="form-controls">
                                <div class="hidden">
                                    <input type="hidden" name="properties[_tags]" :value="props.product.tags.join(',')" data-property>
                                    <input v-if="props.selectedVariant" type="hidden" name="id" :value="props.selectedVariant.id" data-property>
                                    <input type="hidden" name="quantity" data-qty-selector v-model="props.quantity">
                                </div>
                            </div>

                            <!--variant data-->

                            <template v-if="!props.selectedVariant">
                                <button disabled class="btn | w-full py-button-y px-button-x rounded-full text-center text-button flex items-center justify-center relative cursor-pointer | lg:text-button-lg bg-primary-500 text-neutral-0 | transition-all duration-animation-speed | disabled">Not available</button>
                            </template>
                            <template v-else-if="props.selectedVariant.available">
                                <button type="submit" data-cart-add-async class="btn | w-full py-button-y px-button-x rounded-full text-center text-button flex items-center justify-center relative cursor-pointer | lg:text-button-lg bg-primary-500 text-neutral-0 | transition-all duration-animation-speed">Add to Cart</button>
                            </template>
                            <template v-else>
                                <button disabled class="btn | w-full py-button-y px-button-x rounded-full text-center text-button flex items-center justify-center relative cursor-pointer | lg:text-button-lg bg-primary-500 text-neutral-0 | transition-all duration-animation-speed | disabled">Sold Out</button>
                            </template>

                        </form>

                    </template>

                </div>
            </template>
        </product-card>

    </div>

</section>


{% schema %}
  {
    "name": "Featured Product",
    "settings": [
        {
            "type": "product",
            "id": "product",
            "label": "Product"
        },
        {
            "type": "header",
            "content": "background color"
        },
        {
            "type": "select",
            "id": "bg_color",
            "options": [
                { "value": "bg-primary", "label": "Teal"},
                { "value": "bg-secondary", "label": "Brown"},
                { "value": "bg-neutral", "label": "White"},
                { "value": "", "label": "None"}
            ],
            "label": "Background color"
        },
        {
            "type": "range",
            "id": "bg_color_shade",
            "min": 0,
            "max": 900,
            "step": 100,
            "label": "Background color shade",
            "info": "Number range 0 - 900. Lighest to darkest",
            "default": 500
        },
        {
            "type": "select",
            "id": "text-align",
            "options": [
                { "value": "text-center justify-center", "label": "Center"},
                { "value": "text-left justify-start", "label": "Left"},
                { "value": "text-right justify-end", "label": "Right"}
            ],
            "label": "Text alignment"
        },
        {
            "type": "header",
            "content": "Fonts & Copy"
        },
        {
            "type": "textarea",
            "id": "title",
            "label": "Title"
        },
        {
            "type": "select",
            "id": "title_typeface",
            "options": [
                { "value": "font-headline", "label": "Headline"},
                { "value": "font-body", "label": "Body"}
            ],
            "label": "Title font"
        },
        {
            "type": "select",
            "id": "title_size",
            "options": [
                { "value": "text-headline-6 lg:text-headline-6-lg", "label": "Heading 6"},
                { "value": "text-headline-5 lg:text-headline-5-lg", "label": "Heading 5"},
                { "value": "text-headline-4 lg:text-headline-4-lg", "label": "Heading 4"},
                { "value": "text-headline-3 lg:text-headline-3-lg", "label": "Heading 3"},
                { "value": "text-headline-2 lg:text-headline-2-lg", "label": "Heading 2"},
                { "value": "text-headline-1 lg:text-headline-1-lg", "label": "Heading 1"},
                { "value": "text-display lg:text-display-lg", "label": "Display"}
            ],
            "label": "Title heading size"
        },
        {
            "type": "select",
            "id": "title_weight",
            "options": [
                { "value": "font-bold", "label": "Bold"},
                { "value": "font-semibold", "label": "Semibold"},
                { "value": "font-medium", "label": "Medium"},
                { "value": "font-normal", "label": "Normal"},
                { "value": "font-light", "label": "Light"},
                { "value": "font-extralight", "label": "Extralight"},
                { "value": "font-thin", "label": "Thin"}
            ],
            "label": "Title weight"
        },
        {
            "type": "select",
            "id": "title_color",
            "options": [
                { "value": "text-primary", "label": "Teal"},
                { "value": "text-secondary", "label": "Brown"},
                { "value": "text-neutral", "label": "White"}     
            ],
            "label": "Title color"
        },
        {
            "type": "range",
            "id": "title_color_shade",
            "min": 0,
            "max": 900,
            "step": 100,
            "label": "Title color shade",
            "info": "Number range 0 - 900. Lighest to darkest",
            "default": 500
        },
        {
            "type": "richtext",
            "id": "subtitle",
            "label": "Subtitle"
        },
        {
            "type": "select",
            "id": "subtitle_typeface",
            "options": [
                { "value": "font-headline", "label": "Headline"},
                { "value": "font-body", "label": "Body"}
            ],
            "label": "Subtitle font"
        },
        {
            "type": "select",
            "id": "subtitle_size",
            "options": [
                { "value": "text-body-small lg:text-body-small-lg", "label": "Body Small" },
                { "value": "text-body-medium lg:text-body-medium-lg", "label": "Body Medium" },
                { "value": "text-body-large lg:text-body-large-lg", "label": "Body Large" },
                { "value": "text-headline-6 lg:text-headline-6-lg", "label": "Heading 6" },
                { "value": "text-headline-5 lg:text-headline-5-lg", "label": "Heading 5" },
                { "value": "text-headline-4 lg:text-headline-4-lg", "label": "Heading 4" },
                { "value": "text-headline-3 lg:text-headline-3-lg", "label": "Heading 3" },
                { "value": "text-headline-2 lg:text-headline-2-lg", "label": "Heading 2"},
                { "value": "text-headline-1 lg:text-headline-1-lg", "label": "Heading 1"},
                { "value": "text-display lg:text-display-lg", "label": "Display"}
            ],
            "label": "Subtitle heading size"
        },
        {
            "type": "select",
            "id": "subtitle_weight",
            "options": [
                {
                    "value": "font-bold",
                    "label": "Bold"
                },
                {
                    "value": "font-semibold",
                    "label": "Semibold"
                },
                {
                    "value": "font-medium",
                    "label": "Medium"
                },
                {
                    "value": "font-normal",
                    "label": "Normal"
                },
                {
                    "value": "font-light",
                    "label": "Light"
                },
                {
                    "value": "font-extralight",
                    "label": "Extralight"
                },
                {
                    "value": "font-thin",
                    "label": "Thin"
                }
            ],
            "label": "Title weight"
        },
        {
            "type": "select",
            "id": "subtitle_color",
            "options": [
                {
                    "value": "text-primary",
                    "label": "Teal"
                },
                {
                    "value": "text-secondary",
                    "label": "Brown"
                },
                {
                    "value": "text-neutral",
                    "label": "White"
                }
            ],
            "label": "Subtitle color"
        },
        {
            "type": "range",
            "id": "subtitle_color_shade",
            "min": 0,
            "max": 900,
            "step": 100,
            "label": "Subtitle color shade",
            "info": "Number range 0 - 900. Lighest to darkest",
            "default": 500
        },
        {
            "type": "header",
            "content": "Card Colours"
        },
        {
            "type": "select",
            "id": "pc_text_color",
            "options": [
                { "value": "text-primary", "label": "Teal"},
                { "value": "text-secondary", "label": "Brown"},
                { "value": "text-neutral", "label": "White"}                       
            ],
            "label": "Text color"
        },
        {
            "type": "range",
            "id": "pc_text_color_shade",
            "min": 0,
            "max": 900,
            "step": 100,
            "label": "Text color shade",
            "info": "Number range 0 - 900. Lighest to darkest",
            "default": 500
        },
        {
            "type": "header",
            "content": "Modal Colours"
        },
        {
            "type": "select",
            "id": "pc_modal_bg_color",
            "options": [
                { "value": "bg-primary", "label": "Teal"},
                { "value": "bg-secondary", "label": "Brown"},
                { "value": "bg-neutral", "label": "White"},
                { "value": "", "label": "None"}
            ],
            "label": "Background modal color"
        },
        {
            "type": "range",
            "id": "pc_modal_bg_color_shade",
            "min": 0,
            "max": 900,
            "step": 100,
            "label": "Background modal color shade",
            "info": "Number range 0 - 900. Lighest to darkest",
            "default": 500
        },
        {
            "type": "select",
            "id": "pc_modal_text_color",
            "options": [
                { "value": "text-primary", "label": "Teal"},
                { "value": "text-secondary", "label": "Brown"},
                { "value": "text-neutral", "label": "White"}                   
            ],
            "label": "Text color"
        },
        {
            "type": "range",
            "id": "pc_modal_text_color_shade",
            "min": 0,
            "max": 900,
            "step": 100,
            "label": "Text color shade",
            "info": "Number range 0 - 900. Lighest to darkest",
            "default": 500
        },
        {
            "type": "select",
            "id": "border_color",
            "options": [
            {
                "value": "border-primary",
                "label": "Teal"
            },
            {
                "value": "border-secondary",
                "label": "Brown"
            },
            {
                "value": "border-neutral",
                "label": "Neutral (white\/grey\/black)"
            }
            ],
            "label": "Border color"
        },
        {
            "type": "range",
            "id": "border_shade",
            "min": 0,
            "max": 900,
            "step": 100,
            "label": "Border color shade",
            "info": "Number range 0 - 900. Lighest to darkest",
            "default": 500
        },
        {
            "type": "header",
            "content": "Button content"
        },
        {
            "type": "text",
            "id": "pc_buy_now",
            "label": "Add to cart btn"
        },
        {
            "type": "select",
            "id": "pc_btn_color",
            "options": [
                { "value": "bg-primary", "label": "Teal"},
                { "value": "bg-secondary", "label": "Brown"},
                { "value": "bg-neutral", "label": "White"},
                { "value": "", "label": "None"}
            ],
            "label": "Button color"
        },
        {
            "type": "range",
            "id": "pc_btn_color_shade",
            "min": 0,
            "max": 900,
            "step": 100,
            "label": "Background color shade",
            "info": "Number range 0 - 900. Lighest to darkest",
            "default": 500
        },
        {
            "type": "select",
            "id": "pc_btn_text_color",
            "options": [
                { "value": "text-primary", "label": "Teal"},
                { "value": "text-secondary", "label": "Brown"},
                { "value": "text-neutral", "label": "White"}
            ],
            "label": "Button text color"
        },
        {
            "type": "range",
            "id": "pc_btn_text_color_shade",
            "min": 0,
            "max": 900,
            "step": 100,
            "label": "Text color shade",
            "info": "Number range 0 - 900. Lighest to darkest",
            "default": 500
        },
        {
            "type": "header",
            "content": "button hover styles"
        },
        {
            "type": "select",
            "id": "pc_btn_hover_color",
            "options": [
                { "value": "hover:bg-primary", "label": "Teal"},
                { "value": "hover:bg-secondary", "label": "Brown"},
                { "value": "hover:bg-neutral", "label": "White"},
                { "value": "", "label": "None"}
            ],
            "label": "Button hover color"
        },
        {
            "type": "range",
            "id": "pc_btn_hover_color_shade",
            "min": 0,
            "max": 900,
            "step": 100,
            "label": "Background color shade",
            "info": "Number range 0 - 900. Lighest to darkest",
            "default": 500
        },
        {
            "type": "select",
            "id": "pc_btn_hover_text_color",
            "options": [
                { "value": "hover:text-primary-500", "label": "Teal"},
                { "value": "hover:text-primary-900", "label": "Teal dark"},
                { "value": "hover:text-primary-200", "label": "Teal light"},
                { "value": "hover:text-secondary-500", "label": "Brown"},
                { "value": "hover:text-secondary-900", "label": "Brown dark"},
                { "value": "hover:text-secondary-200", "label": "Brown light"},
                { "value": "hover:text-white", "label": "White"},
                { "value": "hover:text-black", "label": "Black"}
            ],
            "label": "Button hover text color"
        },
        {
            "type": "text",
            "id": "quantity",
            "label": "Quantity select label",
            "default": "Quantity"
        },
        {
            "type": "text",
            "id": "delivery_fee_msg",
            "label": "Delivery Fee Message",
            "default": "Buy more than one to receive a discount. Free delivery for orders over £30.00"
        },
        {
            "type": "text",
            "id": "express_msg",
            "label": "Express Checkout message",
            "default": "Or express checkout with"
        }
    ],
    "presets": [
        {
            "name": "Featured Product"
        }
    ]

  }
{% endschema %}